class Deck

types
-- TODO Define types here

values
-- TODO Define values here

instance variables
	public cards : seq of CardUtils`carta := []

operations
	public Deck : () ==> Deck
	Deck() == (
		dcl cardSet : set of CardUtils`carta := {mk_CardUtils`carta(v, s) | v in set CardUtils`CardValues, s in set CardUtils`CardSuits};
		fillSeq(cardSet)
	)
	post len cards = 52;
	
	public dealCard : () ==> CardUtils`carta
	dealCard() == (
		dcl index : nat1 := (MATH`rand(len cards) + 1);
		let c = cards(index) in (remove(c); return c)
	)
	pre cards <> [];
	
	public fillSeq : set of CardUtils`carta ==> ()
	fillSeq(cardSet) == (
		let c in set cardSet 
			in let remain = cardSet \ {c} 
				in (if remain = {} 
						then cards := cards ^ [c]
						else (cards := cards ^ [c]; fillSeq(remain)))
	)
	pre cardSet <> {};
	
	public remove : CardUtils`carta ==> ()
	remove(c) == (
		dcl newCards : seq of CardUtils`carta := [];
		for x in cards do
			if x <> c
			then newCards := newCards ^ [x];
		cards := newCards;
	);

traces
-- TODO Define Combinatorial Test Traces here

end Deck